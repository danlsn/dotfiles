# If you come from bash you might have to change your $PATH.
export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
export PATH="$HOME/Projects/scripts/bin:$PATH"
export PATH=$HOME/bin:/usr/local/bin:/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/bin:$PATH
export PATH=$HOME/Library/Python/2.7/bin:$HOME/Library/Python/3.9/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/danlsn/.dotfiles/oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(zsh-autosuggestions zsh-syntax-highlighting zsh-history-substring-search wakatime)

source $ZSH/oh-my-zsh.sh

# User configuration

export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias zshconfig="open -a 'PyCharm.app' ~/.zshrc"
alias ohmyzsh="open -a 'PyCharm.app' ~/.oh-my-zsh"

export EXIFTOOL_HOME="$HOME/.config/exiftool"


  if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

    autoload -Uz compinit
    compinit
  fi

function hex2txt() {
  echo "$1" | xxd -r -p
}

zstyle ':autocomplete:tab:*' insert-unambiguous yes
zstyle ':autocomplete:tab:*' widget-style menu-complete

# Set bat theme
export BAT_THEME="Solarized (dark)"

# Custom Functions
function lower() {
	echo "$1" | tr '[:upper:]' '[:lower:]'
}

function upper() {
	echo "$1" | tr '[:lower:]' '[:upper:]'
}

function get_extension() {
	if [[ -n "$1" ]]; then
		PATH="$1"
		echo ${PATH##*.}
	fi
}

function list_by_extension() {
	if [[ -f $1 ]]; then 
		ext="$(echo "${1##*.}" | tr '[:upper:]' '[:lower:]')"; 
		echo $(realpath $x) >> ./$ext.txt; 
	fi; 
}

function move_by_extension() {
	if [[ -f $1 ]]; then 
		EXT="$(echo "${1##*.}" | tr '[:upper:]' '[:lower:]')";
		rsync -a --remove-source-files $1 ./$EXT/
		echo "Moved \"$1\"..."
	fi; 
}

function picturefs_dashcam() {
	exiftool -if '$FileName =~ /\d{8}_\d{6}_\w{1,3}.+/' \
		-if '$CreateDate' \
		-'FileName<./Personal-Library-${CreateDate#;DateFmt("%Y")}/${CreateDate#;DateFmt("%m/%d")}/video/Dashcam/$FileTypeExtension/%f%+c.%ue' \
		-fast2 -execute \
		-if '$FileName =~ /\d{8}_\d{6}_\w{1,3}.+/' -ext 3gf -ext gps -m -fast2 \
		-'FileName<./Personal-Library-${FileName#;s/(\d{4})(\d{2})(\d{2})_.+/$1\/$2\/$3/}/video/Dashcam/%le/%f%+c.%ue' \
		-common_args -progress -r "$1"
}

function picturefsv2_exec() {
	input=$1
	
	# Get Label Name
	label=$(echo "$1" | awk -F/ '{print $3}')
	
	# If run on internal drive set picturefs_dir to ~/Pictures/PictureFSv2/
	if [[ $label == 'danlsn' ]] 
	then 
		picturefs_dir="~/Pictures/PictureFSv2/"
	else 
		picturefs_dir="/Volumes/$label/PictureFSv2/"
	fi 
	cd $picturefs_dir
	exiftool -if '$CreateDate' -if '$Model' -FileName'<./Personal-Library-${CreateDate#;DateFmt("%Y")}/${CreateDate#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/${Model;}/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -ee -m -progress -r "$input"
	echo $picturefs_dir 
}
## Custom Composite Tag
# find _Inbox/ -type f -print0 | xargs -0 -L 500 -P 10 exiftool -if '$FSDirectory' -'FileName<./${FSDirectory}/%f%+c.%ue' -progress: -execute -common_args -fast -ee -m -r
# find _Inbox/ -type f -print0 | xargs -0 -L 500 -P 10 exiftool -if '$FSDirectory' -'FileName<./${FSDirectory}/%f%+c.%ue' -progress: -execute -progress -common_args -fast2 -ee -m -r

### Pesky JPEGs without Model Data
# exiftool -if '$CreateDate' -if 'not $Model' -if '$WriterName' -FileName'<./Personal-Library-${CreateDate#;DateFmt("%Y")}/${CreateDate#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/${WriterName;}/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -ee -m -progress -r

### MISC VIDEO
# find _Inbox/MPEG-4\ movie/mp4/ -type f -print0 | xargs -0 -L 500 -P 4 exiftool -if '$MediaCreateDate' -if 'not $Model' -if 'not $Make' -FileName'<./Personal-Library-${MediaCreateDate#;DateFmt("%Y")}/${MediaCreateDate#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/MiscVideo/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -ee -m -progress -fast -r ;

# exiftool -ext xmp -if $DateCreated -if not $Model -FileName'<./Personal-Library-${DateCreated#;DateFmt("%Y")}/${DateCreated#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/Sidecar Files/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -m -progress -r "$input"
#exiftool -ext xmp -if $DateCreated -if not $Model -FileName'<./Personal-Library-${DateCreated#;DateFmt("%Y")}/${DateCreated#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/Sidecar Files/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -m -progress -r "$input"
#
#find /Volumes/TSBG/PictureFSv2/_Inbox/QuickTime\ movie/mov/ -type f -print0 | xargs -0 -L 200 -I {} exiftool -ext mov -if '$QuickTime:ContentCreateDate' -if '$QuickTime:Model' -FileName'<./Personal-Library-${QuickTime:ContentCreateDate#;DateFmt("%Y")}/${QuickTime:ContentCreateDate#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/${QuickTime:Model;}/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -m -progress -r - "{}"
#
#exiftool -ext mov -if '$QuickTime:ContentCreateDate' -if '$QuickTime:Model' -FileName'<./Personal-Library-${QuickTime:ContentCreateDate#;DateFmt("%Y")}/${QuickTime:ContentCreateDate#;DateFmt("%m/%d")}/${MIMEType;s/(\w{1,}).+/$1/}/${QuickTime:Model;}/$FileTypeExtension/%f%+c.%ue' -progress: -execute -common_args -m -progress -r - "/Volumes/TSBG/PictureFSv2/_Inbox/QuickTime movie/mov/20130127-173427-207.MOV"
# exiftool -o . -'FileName<./${FSTakeoutDir}/%f.%e' -progress: -progress -m -r /Volumes/HANSEN/DriveFS/Google\ Takeout/takeout-20200602T105107Z/takeout-20200602T105107Z-012/Takeout/Google\ Photos/2018-12-27-28/
# exiftool -if '${FSTakeoutDir}' -FileName'<./${FSTakeoutDir}/%f%+c.%e' -execute -common_args -progress: -progress -m -ee -r "/Volumes/HANSEN/DriveFS/Google Takeout/takeout-20200602T105107Z/takeout-20200602T105107Z-012 copy/Takeout/Google Photos/2016-09-09 #2/"

function rmover() {
	## rsync -avhP --stats --remove-source-files -R "$1" "$2"
	## rsync --archive --no-l --update --copy-links --hard-links --xattrs --remove-source-files --stats --progress -v --relative "$1" "$2"
	rsync -rLptogoDOHAXRkh --progress --remove-source-files "$1" "$2"
	find "$1" -type d -empty -delete
}

function rcopier() {
	rsync -avuhP --stats -R "$1" "$2"
}

function manifest() {
	MANIFEST=manifest_$(date "+%Y%m%d_%H%M%S")
	echo "------------------------------------------------------------" >> $MANIFEST.txt
	echo "" >> $MANIFEST.txt
	date >> $MANIFEST.txt
	echo "" >> $MANIFEST.txt
	df -h . >> $MANIFEST.txt
	echo "" >> $MANIFEST.txt
	find "$(pwd)" -type d -depth 2 -print0 | sort -z | xargs -0 -I {} gdu --si -Ls --time "{}" >> $MANIFEST.txt
	cat $MANIFEST.txt | pbcopybrew 
	cat $MANIFEST.txt
}

function manifest3() {
	MANIFEST=manifest_$(date "+%Y%m%d_%H%M%S")
	echo "------------------------------------------------------------" >> $MANIFEST.txt
	echo "" >> $MANIFEST.txt
	date >> $MANIFEST.txt
	echo "" >> $MANIFEST.txt
	df -h . >> $MANIFEST.txt
	echo "" >> $MANIFEST.txt
	find "$(pwd)" -type d -depth 3 -print0 | sort -z | xargs -0 -I {} gdu --si -Ls --time "{}" >> $MANIFEST.txt
	cat $MANIFEST.txt | pbcopy
	cat $MANIFEST.txt
}

function borgmount() {
	BASE="$(basename "$1")"
	echo "Creating Mount Point..."
	echo
	mkdir -p $HOME/mnt/borg/"$BASE"
	echo "Mounting Borg Repo..."
	echo 
	borg mount "$1" $HOME/mnt/borg/"$BASE"
	open -a Finder $HOME/mnt/borg/"$BASE"
}

function exifjson() {
	in="$(pbpaste)"
	out="$(exiftool -json -all:all -G -ee "$in")"
	echo "$out" | jq
}
alias bzstats='watch -d=permanent bz_stats.py'

alias l@='la -l@'
# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/danlsn/bin/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/danlsn/bin/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/danlsn/bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/danlsn/bin/google-cloud-sdk/completion.zsh.inc'; fi
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"

eval $(thefuck --alias)

source /Users/danlsn/.config/broot/launcher/bash/br
eval # ============================================================================= # # Utility functions for zoxide. # # pwd based on the value of _ZO_RESOLVE_SYMLINKS. function __zoxide_pwd() { uiltin pwd -L } # cd + custom logic based on the value of _ZO_ECHO. function __zoxide_cd() { # shellcheck disable=SC2164 uiltin cd "$@" } # ============================================================================= # # Hook configuration for zoxide. # # Hook to add new entries to the database. function __zoxide_hook() { zoxide add -- "$(__zoxide_pwd)" } # Initialize hook. # shellcheck disable=SC2154 if [[ ${precmd_functions[(Ie)__zoxide_hook]} -eq 0 ]] && [[ ${chpwd_functions[(Ie)__zoxide_hook]} -eq 0 ]]; then chpwd_functions=("${chpwd_functions[@]}" "__zoxide_hook") fi # ============================================================================= # # When using zoxide with --no-aliases, alias these internal functions as # desired. # # Jump to a directory using only keywords. function __zoxide_z() { if [ "$#" -eq 0 ]; then __zoxide_cd ~ elif [ "$#" -eq 1 ] && [ "$1" = '-' ]; then if [ -n "${OLDPWD}" ]; then __zoxide_cd "${OLDPWD}" else # shellcheck disable=SC2016 uiltin printf 'zoxide: $OLDPWD is not set' return 1 fi elif [ "$#" -eq 1 ] && [ -d "$1" ]; then __zoxide_cd "$1" else uiltin local result result="$(zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" \ && __zoxide_cd "${result}" fi } # Jump to a directory using interactive search. function __zoxide_zi() { uiltin local result result="$(zoxide query -i -- "$@")" && __zoxide_cd "${result}" } # ============================================================================= # # Convenient aliases for zoxide. Disable these using --no-aliases. # # Remove definitions. function __zoxide_unset() { uiltin unalias "$@" &>/dev/null uiltin unfunction "$@" &>/dev/null uiltin unset "$@" &>/dev/null } __zoxide_unset 'z' function z() { __zoxide_z "$@" } __zoxide_unset 'zi' function zi() { __zoxide_zi "$@" } # ============================================================================= # # To initialize zoxide, add this to your configuration (usually ~/.zshrc): # # eval "$(zoxide init zsh)"
. /usr/local/Cellar/z/1.9/etc/profile.d/z.sh
tre() { command tre "$@" -e && source "/tmp/tre_aliases_$USER" 2>/dev/null; }

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/danlsn/opt/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/danlsn/opt/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/danlsn/opt/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/danlsn/opt/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


### Bashhub.com Installation
if [ -f ~/.bashhub/bashhub.zsh ]; then
    source ~/.bashhub/bashhub.zsh
fi

export ZPLUG_HOME=/usr/local/opt/zplug
source $ZPLUG_HOME/init.zsh
source ~/bin/commacd.sh
source ~/.local/bin/bashmarks.sh

PATH="/Users/danlsn/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/danlsn/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/danlsn/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/danlsn/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/danlsn/perl5"; export PERL_MM_OPT;
